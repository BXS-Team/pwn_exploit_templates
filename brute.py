import threading
class brute(threading.Thread):
	def __init__(self,ispow_byte=None,offset=None):
		threading.Thread.__init__(self)
		self.offset=offset
		self.ispow_byte=ispow_byte
	def run(self):
		if self.ispow_byte:
			brute.pow_byte(self,self.offset)
		else:
			brute.pow(self,self.offset)
	def pow_byte(self,offset=None):
		for i in range(0x20,128):
			io=pwn_io(binary,isremote,isdebug,ip,port)
			try:
				if exploit(io,offset,chr(i)):
					pass
				else:
					continue
			except:
				io.close()
				continue
			break
		log.info("Thread-{} finish this work".format(str(offset)))
		global flag
		flag[offset]=chr(i)
	def pow(self,offset=None):
		while True:
			io=pwn_io(binary,isremote,isdebug,ip,port)
			try:
				exploit(io,offset)
			except:
				io.close()
				continue
			break
def mt_th():
	thread_list=[]
	for i in range(multi_thread_num):
		try:
			Thread_obj=brute(ispow_byte,i)
		except:
			log.info("fail to create thread-{}".format(str(offset)))
			log.info("bye~~")
			exit()
		Thread_obj.start()
		thread_list.append(Thread_obj)
	for t in thread_list:
		t.join()